                  dupLS :state:             refines            dupLS :state: >> swapLS :state:
                  dupLS :state:             refines            (dupLS :state:) |+| (rotLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (dupLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                  dupLS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                  dupLS :state:             refines            (rotLS :state:) |+| (dupLS :state:)
                  dupLS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                  dupLS :state:             refines            (dupLS :state:) |+| (swapLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                  dupLS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                  dupLS :state:             refines            (swapLS :state:) |+| (dupLS :state:)
                  dupLS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                  dupLS :state:             refines            (dupLS :state:) ||| (whenJust pushLS :state: x)
                  dupLS :state:             refines            (whenJust pushLS :state: x) ||| (dupLS :state:)
                  popLS :state:             refines            popLS :state: >> rotLS :state:
                  popLS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                  popLS :state:             refines            (popLS :state:) |+| (rotLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (popLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                  popLS :state:             refines            (rotLS :state:) |+| (popLS :state:)
                  popLS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                  popLS :state:             refines            (overLS :state:) ||| (popLS :state:)
                  popLS :state:             refines            (popLS :state:) |+| (swapLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (overLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                  popLS :state:             refines            (swapLS :state:) |+| (popLS :state:)
                  popLS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                  popLS :state:             refines            (popLS :state:) ||| (whenJust pushLS :state: x)
                  popLS :state:             refines            (whenJust pushLS :state: x) ||| (popLS :state:)
                  rotLS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                  rotLS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (rotLS :state:)
                  rotLS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                  rotLS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                  rotLS :state:             refines            (rotLS :state:) ||| (whenJust pushLS :state: x)
                  rotLS :state:             refines            (whenJust pushLS :state: x) ||| (rotLS :state:)
                 overLS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                 overLS :state:             refines            (overLS :state:) |+| (rotLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (popLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                 overLS :state:             refines            (popLS :state:) ||| (overLS :state:)
                 overLS :state:             refines            (rotLS :state:) |+| (overLS :state:)
                 overLS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (overLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                 overLS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                 overLS :state:             refines            (overLS :state:) ||| (whenJust pushLS :state: x)
                 overLS :state:             refines            (whenJust pushLS :state: x) ||| (overLS :state:)
                 peekLS :state:             refines            dupLS :state: >> popLS :state:
                 peekLS :state:             refines            swapLS :state: >> swapLS :state:
                 peekLS :state:             refines            (dupLS :state:) |+| (popLS :state:)
                 peekLS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                 peekLS :state:             refines            (popLS :state:) |+| (dupLS :state:)
                 peekLS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                 peekLS :state:             refines            (overLS :state:) ||| (popLS :state:)
                 peekLS :state:             refines            (popLS :state:) ||| (overLS :state:)
                 peekLS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                 peekLS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                 peekLS :state:             refines            (swapLS :state:) |+| (swapLS :state:)
                 peekLS :state:             refines            (swapLS :state:) ||| (swapLS :state:)
                 peekLS :state:             refines            (popLS :state:) ||| (whenJust pushLS :state: x)
                 peekLS :state:             refines            (whenJust pushLS :state: x) ||| (popLS :state:)
                 peekLS :state:             refines            popLS :state: >>= \x' -> whenJust pushLS :state: x'
                 swapLS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                 swapLS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                 swapLS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                 swapLS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (swapLS :state:)
                 swapLS :state:             refines            (swapLS :state:) ||| (whenJust pushLS :state: x)
                 swapLS :state:             refines            (whenJust pushLS :state: x) ||| (swapLS :state:)
      whenJust pushLS :state: x             refines            (dupLS :state:) ||| (whenJust pushLS :state: x)
      whenJust pushLS :state: x             refines            (popLS :state:) ||| (whenJust pushLS :state: x)
      whenJust pushLS :state: x             refines            (rotLS :state:) ||| (whenJust pushLS :state: x)
      whenJust pushLS :state: x             refines            (whenJust pushLS :state: x) ||| (dupLS :state:)
      whenJust pushLS :state: x             refines            (whenJust pushLS :state: x) ||| (popLS :state:)
      whenJust pushLS :state: x             refines            (whenJust pushLS :state: x) ||| (rotLS :state:)
      whenJust pushLS :state: x             refines            (overLS :state:) ||| (whenJust pushLS :state: x)
      whenJust pushLS :state: x             refines            (swapLS :state:) ||| (whenJust pushLS :state: x)
      whenJust pushLS :state: x             refines            (whenJust pushLS :state: x) ||| (overLS :state:)
      whenJust pushLS :state: x             refines            (whenJust pushLS :state: x) ||| (swapLS :state:)
overLS :state: >> popLS :state:             refines            (popLS :state:) ||| (whenJust pushLS :state: x)
overLS :state: >> popLS :state:             refines            (whenJust pushLS :state: x) ||| (popLS :state:)

                   dupCAS :state:             refines            dupCAS :state: >> swapCAS :state:
                   dupCAS :state:             refines            (dupCAS :state:) |+| (rotCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (dupCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (rotCAS :state:)
                   dupCAS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                   dupCAS :state:             refines            (rotCAS :state:) |+| (dupCAS :state:)
                   dupCAS :state:             refines            (rotCAS :state:) ||| (dupCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) |+| (swapCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (overCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (swapCAS :state:)
                   dupCAS :state:             refines            (overCAS :state:) ||| (dupCAS :state:)
                   dupCAS :state:             refines            (swapCAS :state:) |+| (dupCAS :state:)
                   dupCAS :state:             refines            (swapCAS :state:) ||| (dupCAS :state:)
                   dupCAS :state:             refines            (dupCAS :state:) ||| (whenJust pushCAS :state: x)
                   dupCAS :state:             refines            (whenJust pushCAS :state: x) ||| (dupCAS :state:)
                   popCAS :state:             refines            popCAS :state: >> rotCAS :state:
                   popCAS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) |+| (rotCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (popCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (rotCAS :state:)
                   popCAS :state:             refines            (rotCAS :state:) |+| (popCAS :state:)
                   popCAS :state:             refines            (rotCAS :state:) ||| (popCAS :state:)
                   popCAS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) |+| (swapCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (swapCAS :state:)
                   popCAS :state:             refines            (swapCAS :state:) |+| (popCAS :state:)
                   popCAS :state:             refines            (swapCAS :state:) ||| (popCAS :state:)
                   popCAS :state:             refines            (popCAS :state:) ||| (whenJust pushCAS :state: x)
                   popCAS :state:             refines            (whenJust pushCAS :state: x) ||| (popCAS :state:)
                   rotCAS :state:             refines            (dupCAS :state:) ||| (rotCAS :state:)
                   rotCAS :state:             refines            (popCAS :state:) ||| (rotCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (dupCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (popCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (rotCAS :state:)
                   rotCAS :state:             refines            (overCAS :state:) ||| (rotCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (overCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                   rotCAS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                   rotCAS :state:             refines            (rotCAS :state:) ||| (whenJust pushCAS :state: x)
                   rotCAS :state:             refines            (whenJust pushCAS :state: x) ||| (rotCAS :state:)
                  overCAS :state:             refines            (dupCAS :state:) ||| (overCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) |+| (rotCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (dupCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (rotCAS :state:)
                  overCAS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                  overCAS :state:             refines            (rotCAS :state:) |+| (overCAS :state:)
                  overCAS :state:             refines            (rotCAS :state:) ||| (overCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (overCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (swapCAS :state:)
                  overCAS :state:             refines            (swapCAS :state:) ||| (overCAS :state:)
                  overCAS :state:             refines            (overCAS :state:) ||| (whenJust pushCAS :state: x)
                  overCAS :state:             refines            (whenJust pushCAS :state: x) ||| (overCAS :state:)
                  peekCAS :state:             refines            dupCAS :state: >> popCAS :state:
                  peekCAS :state:             refines            swapCAS :state: >> swapCAS :state:
                  peekCAS :state:             refines            (dupCAS :state:) |+| (popCAS :state:)
                  peekCAS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                  peekCAS :state:             refines            (popCAS :state:) |+| (dupCAS :state:)
                  peekCAS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                  peekCAS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                  peekCAS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                  peekCAS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                  peekCAS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                  peekCAS :state:             refines            (swapCAS :state:) |+| (swapCAS :state:)
                  peekCAS :state:             refines            (swapCAS :state:) ||| (swapCAS :state:)
                  peekCAS :state:             refines            (popCAS :state:) ||| (whenJust pushCAS :state: x)
                  peekCAS :state:             refines            (whenJust pushCAS :state: x) ||| (popCAS :state:)
                  peekCAS :state:             refines            popCAS :state: >>= \x' -> whenJust pushCAS :state: x'
                  swapCAS :state:             refines            (dupCAS :state:) ||| (swapCAS :state:)
                  swapCAS :state:             refines            (popCAS :state:) ||| (swapCAS :state:)
                  swapCAS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (dupCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (popCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                  swapCAS :state:             refines            (overCAS :state:) ||| (swapCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (overCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (swapCAS :state:)
                  swapCAS :state:             refines            (swapCAS :state:) ||| (whenJust pushCAS :state: x)
                  swapCAS :state:             refines            (whenJust pushCAS :state: x) ||| (swapCAS :state:)
       whenJust pushCAS :state: x             refines            (dupCAS :state:) ||| (whenJust pushCAS :state: x)
       whenJust pushCAS :state: x             refines            (popCAS :state:) ||| (whenJust pushCAS :state: x)
       whenJust pushCAS :state: x             refines            (rotCAS :state:) ||| (whenJust pushCAS :state: x)
       whenJust pushCAS :state: x             refines            (whenJust pushCAS :state: x) ||| (dupCAS :state:)
       whenJust pushCAS :state: x             refines            (whenJust pushCAS :state: x) ||| (popCAS :state:)
       whenJust pushCAS :state: x             refines            (whenJust pushCAS :state: x) ||| (rotCAS :state:)
       whenJust pushCAS :state: x             refines            (overCAS :state:) ||| (whenJust pushCAS :state: x)
       whenJust pushCAS :state: x             refines            (swapCAS :state:) ||| (whenJust pushCAS :state: x)
       whenJust pushCAS :state: x             refines            (whenJust pushCAS :state: x) ||| (overCAS :state:)
       whenJust pushCAS :state: x             refines            (whenJust pushCAS :state: x) ||| (swapCAS :state:)
overCAS :state: >> popCAS :state:             refines            (popCAS :state:) ||| (whenJust pushCAS :state: x)
overCAS :state: >> popCAS :state:             refines            (whenJust pushCAS :state: x) ||| (popCAS :state:)

                                      dupLS :state:        is equivalent to        dupCAS :state:
                                      popLS :state:        is equivalent to        popCAS :state:
                                      rotLS :state:        is equivalent to        rotCAS :state:
                                     dupCAS :state:             refines            (dupLS :state:) |+| (rotLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) ||| (dupLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                                     dupCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                                     dupCAS :state:             refines            (rotLS :state:) |+| (dupLS :state:)
                                     dupCAS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) |+| (swapLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                                     dupCAS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                                     dupCAS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                                     dupCAS :state:             refines            (swapLS :state:) |+| (dupLS :state:)
                                     dupCAS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                                     overLS :state:        is equivalent to        overCAS :state:
                                     peekLS :state:        is equivalent to        peekCAS :state:
                                     popCAS :state:             refines            popLS :state: >> rotLS :state:
                                     popCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                                     popCAS :state:             refines            (popLS :state:) |+| (rotLS :state:)
                                     popCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                                     popCAS :state:             refines            (popLS :state:) ||| (popLS :state:)
                                     popCAS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                                     popCAS :state:             refines            (rotLS :state:) |+| (popLS :state:)
                                     popCAS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                                     popCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                                     popCAS :state:             refines            (popLS :state:) |+| (swapLS :state:)
                                     popCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                                     popCAS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                                     popCAS :state:             refines            (swapLS :state:) |+| (popLS :state:)
                                     popCAS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                                     rotCAS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                                     rotCAS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                                     rotCAS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                                     rotCAS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                                     rotCAS :state:             refines            (rotLS :state:) ||| (rotLS :state:)
                                     rotCAS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                                     rotCAS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                                     rotCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                                     rotCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                                     swapLS :state:        is equivalent to        swapCAS :state:
                                    overCAS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                                    overCAS :state:             refines            (overLS :state:) |+| (rotLS :state:)
                                    overCAS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                                    overCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                                    overCAS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                                    overCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                                    overCAS :state:             refines            (rotLS :state:) |+| (overLS :state:)
                                    overCAS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                                    overCAS :state:             refines            (overLS :state:) ||| (overLS :state:)
                                    overCAS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                                    overCAS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                                    peekCAS :state:             refines            swapLS :state: >> swapLS :state:
                                    peekCAS :state:             refines            (dupLS :state:) |+| (popLS :state:)
                                    peekCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                                    peekCAS :state:             refines            (popLS :state:) |+| (dupLS :state:)
                                    peekCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                                    peekCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                                    peekCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                                    peekCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                                    peekCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                                    peekCAS :state:             refines            (swapLS :state:) |+| (swapLS :state:)
                                    peekCAS :state:             refines            (swapLS :state:) ||| (swapLS :state:)
                                    peekCAS :state:             refines            popLS :state: >>= \x' -> whenJust pushLS :state: x'
                                    swapCAS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                                    swapCAS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                                    swapCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                                    swapCAS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                                    swapCAS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                                    swapCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                                    swapCAS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                                    swapCAS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                                    swapCAS :state:             refines            (swapLS :state:) ||| (swapLS :state:)
                          whenJust pushLS :state: x        is equivalent to        whenJust pushCAS :state: x
                     dupLS :state: >> dupLS :state:        is equivalent to        dupCAS :state: >> dupCAS :state:
                     dupLS :state: >> dupLS :state:        is equivalent to        (dupCAS :state:) |+| (dupCAS :state:)
                     dupLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (dupCAS :state:)
                     dupLS :state: >> dupLS :state:             refines            (dupCAS :state:) |+| (overCAS :state:)
                     dupLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (overCAS :state:)
                     dupLS :state: >> dupLS :state:             refines            (overCAS :state:) |+| (dupCAS :state:)
                     dupLS :state: >> dupLS :state:             refines            (overCAS :state:) ||| (dupCAS :state:)
                     dupLS :state: >> rotLS :state:        is equivalent to        dupCAS :state: >> rotCAS :state:
                     dupLS :state: >> rotLS :state:             refines            (dupCAS :state:) |+| (rotCAS :state:)
                     dupLS :state: >> rotLS :state:             refines            (dupCAS :state:) ||| (rotCAS :state:)
                     dupLS :state: >> rotLS :state:             refines            (rotCAS :state:) |+| (dupCAS :state:)
                     dupLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (dupCAS :state:)
                     popLS :state: >> dupLS :state:        is equivalent to        popCAS :state: >> dupCAS :state:
                     popLS :state: >> dupLS :state:             refines            (dupCAS :state:) |+| (popCAS :state:)
                     popLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> dupLS :state:             refines            (popCAS :state:) |+| (dupCAS :state:)
                     popLS :state: >> dupLS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                     popLS :state: >> popLS :state:        is equivalent to        popCAS :state: >> popCAS :state:
                     popLS :state: >> popLS :state:        is equivalent to        (popCAS :state:) |+| (popCAS :state:)
                     popLS :state: >> popLS :state:             refines            (popCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> rotLS :state:        is equivalent to        popCAS :state: >> rotCAS :state:
                     popLS :state: >> rotLS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) |+| (rotCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) ||| (rotCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (rotCAS :state:) |+| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) |+| (swapCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (popCAS :state:) ||| (swapCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (swapCAS :state:) |+| (popCAS :state:)
                     popLS :state: >> rotLS :state:             refines            (swapCAS :state:) ||| (popCAS :state:)
                     rotLS :state: >> dupLS :state:        is equivalent to        rotCAS :state: >> dupCAS :state:
                     rotLS :state: >> dupLS :state:             refines            (dupCAS :state:) |+| (rotCAS :state:)
                     rotLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (rotCAS :state:)
                     rotLS :state: >> dupLS :state:             refines            (rotCAS :state:) |+| (dupCAS :state:)
                     rotLS :state: >> dupLS :state:             refines            (rotCAS :state:) ||| (dupCAS :state:)
                     rotLS :state: >> popLS :state:        is equivalent to        rotCAS :state: >> popCAS :state:
                     rotLS :state: >> popLS :state:             refines            (popCAS :state:) |+| (rotCAS :state:)
                     rotLS :state: >> popLS :state:             refines            (popCAS :state:) ||| (rotCAS :state:)
                     rotLS :state: >> popLS :state:             refines            (rotCAS :state:) |+| (popCAS :state:)
                     rotLS :state: >> popLS :state:             refines            (rotCAS :state:) ||| (popCAS :state:)
                     rotLS :state: >> rotLS :state:        is equivalent to        rotCAS :state: >> rotCAS :state:
                     rotLS :state: >> rotLS :state:        is equivalent to        (rotCAS :state:) |+| (rotCAS :state:)
                     rotLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (rotCAS :state:)
                     rotLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                     rotLS :state: >> rotLS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                    dupLS :state: >> overLS :state:        is equivalent to        dupCAS :state: >> overCAS :state:
                    dupLS :state: >> overLS :state:             refines            (dupCAS :state:) ||| (dupCAS :state:)
                    dupLS :state: >> overLS :state:             refines            (dupCAS :state:) |+| (overCAS :state:)
                    dupLS :state: >> overLS :state:             refines            (dupCAS :state:) ||| (overCAS :state:)
                    dupLS :state: >> overLS :state:             refines            (overCAS :state:) |+| (dupCAS :state:)
                    dupLS :state: >> overLS :state:             refines            (overCAS :state:) ||| (dupCAS :state:)
                    overLS :state: >> dupLS :state:        is equivalent to        overCAS :state: >> dupCAS :state:
                    overLS :state: >> dupLS :state:             refines            (dupCAS :state:) |+| (overCAS :state:)
                    overLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (overCAS :state:)
                    overLS :state: >> dupLS :state:             refines            (overCAS :state:) |+| (dupCAS :state:)
                    overLS :state: >> dupLS :state:             refines            (overCAS :state:) ||| (dupCAS :state:)
                    overLS :state: >> popLS :state:        is equivalent to        overCAS :state: >> popCAS :state:
                    overLS :state: >> popLS :state:             refines            (dupCAS :state:) |+| (popCAS :state:)
                    overLS :state: >> popLS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                    overLS :state: >> popLS :state:             refines            (popCAS :state:) |+| (dupCAS :state:)
                    overLS :state: >> popLS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                    overLS :state: >> popLS :state:             refines            (overCAS :state:) |+| (popCAS :state:)
                    overLS :state: >> popLS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                    overLS :state: >> popLS :state:             refines            (popCAS :state:) |+| (overCAS :state:)
                    overLS :state: >> popLS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                    overLS :state: >> rotLS :state:        is equivalent to        overCAS :state: >> rotCAS :state:
                    overLS :state: >> rotLS :state:             refines            (dupCAS :state:) ||| (swapCAS :state:)
                    overLS :state: >> rotLS :state:             refines            (overCAS :state:) |+| (rotCAS :state:)
                    overLS :state: >> rotLS :state:             refines            (overCAS :state:) ||| (rotCAS :state:)
                    overLS :state: >> rotLS :state:             refines            (rotCAS :state:) |+| (overCAS :state:)
                    overLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (overCAS :state:)
                    overLS :state: >> rotLS :state:             refines            (swapCAS :state:) ||| (dupCAS :state:)
                    popLS :state: >> overLS :state:        is equivalent to        popCAS :state: >> overCAS :state:
                    popLS :state: >> overLS :state:             refines            (overCAS :state:) |+| (popCAS :state:)
                    popLS :state: >> overLS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                    popLS :state: >> overLS :state:             refines            (popCAS :state:) |+| (overCAS :state:)
                    popLS :state: >> overLS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                    popLS :state: >> swapLS :state:        is equivalent to        popCAS :state: >> swapCAS :state:
                    popLS :state: >> swapLS :state:             refines            (popCAS :state:) |+| (swapCAS :state:)
                    popLS :state: >> swapLS :state:             refines            (popCAS :state:) ||| (swapCAS :state:)
                    popLS :state: >> swapLS :state:             refines            (swapCAS :state:) |+| (popCAS :state:)
                    popLS :state: >> swapLS :state:             refines            (swapCAS :state:) ||| (popCAS :state:)
                    rotLS :state: >> overLS :state:        is equivalent to        rotCAS :state: >> overCAS :state:
                    rotLS :state: >> overLS :state:             refines            (overCAS :state:) |+| (rotCAS :state:)
                    rotLS :state: >> overLS :state:             refines            (overCAS :state:) ||| (rotCAS :state:)
                    rotLS :state: >> overLS :state:             refines            (rotCAS :state:) |+| (overCAS :state:)
                    rotLS :state: >> overLS :state:             refines            (rotCAS :state:) ||| (overCAS :state:)
                    rotLS :state: >> swapLS :state:        is equivalent to        rotCAS :state: >> swapCAS :state:
                    rotLS :state: >> swapLS :state:             refines            (rotCAS :state:) |+| (swapCAS :state:)
                    rotLS :state: >> swapLS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                    rotLS :state: >> swapLS :state:             refines            (swapCAS :state:) |+| (rotCAS :state:)
                    rotLS :state: >> swapLS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                    swapLS :state: >> dupLS :state:        is equivalent to        swapCAS :state: >> dupCAS :state:
                    swapLS :state: >> dupLS :state:             refines            (dupCAS :state:) |+| (swapCAS :state:)
                    swapLS :state: >> dupLS :state:             refines            (dupCAS :state:) ||| (swapCAS :state:)
                    swapLS :state: >> dupLS :state:             refines            (swapCAS :state:) |+| (dupCAS :state:)
                    swapLS :state: >> dupLS :state:             refines            (swapCAS :state:) ||| (dupCAS :state:)
                    swapLS :state: >> popLS :state:        is equivalent to        swapCAS :state: >> popCAS :state:
                    swapLS :state: >> popLS :state:             refines            (popCAS :state:) |+| (swapCAS :state:)
                    swapLS :state: >> popLS :state:             refines            (popCAS :state:) ||| (swapCAS :state:)
                    swapLS :state: >> popLS :state:             refines            (swapCAS :state:) |+| (popCAS :state:)
                    swapLS :state: >> popLS :state:             refines            (swapCAS :state:) ||| (popCAS :state:)
                    swapLS :state: >> rotLS :state:        is equivalent to        swapCAS :state: >> rotCAS :state:
                    swapLS :state: >> rotLS :state:             refines            (rotCAS :state:) |+| (swapCAS :state:)
                    swapLS :state: >> rotLS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                    swapLS :state: >> rotLS :state:             refines            (swapCAS :state:) |+| (rotCAS :state:)
                    swapLS :state: >> rotLS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                   dupCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (dupLS :state:)
                   dupCAS :state: >> dupCAS :state:             refines            (dupLS :state:) |+| (overLS :state:)
                   dupCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                   dupCAS :state: >> dupCAS :state:             refines            (overLS :state:) |+| (dupLS :state:)
                   dupCAS :state: >> dupCAS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                   dupCAS :state: >> rotCAS :state:             refines            (dupLS :state:) |+| (rotLS :state:)
                   dupCAS :state: >> rotCAS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                   dupCAS :state: >> rotCAS :state:             refines            (rotLS :state:) |+| (dupLS :state:)
                   dupCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                   overLS :state: >> overLS :state:        is equivalent to        overCAS :state: >> overCAS :state:
                   overLS :state: >> overLS :state:        is equivalent to        (overCAS :state:) |+| (overCAS :state:)
                   overLS :state: >> overLS :state:             refines            (overCAS :state:) ||| (overCAS :state:)
                   overLS :state: >> swapLS :state:        is equivalent to        overCAS :state: >> swapCAS :state:
                   overLS :state: >> swapLS :state:             refines            (overCAS :state:) |+| (swapCAS :state:)
                   overLS :state: >> swapLS :state:             refines            (overCAS :state:) ||| (swapCAS :state:)
                   overLS :state: >> swapLS :state:             refines            (swapCAS :state:) |+| (overCAS :state:)
                   overLS :state: >> swapLS :state:             refines            (swapCAS :state:) ||| (overCAS :state:)
                   popCAS :state: >> dupCAS :state:             refines            (dupLS :state:) |+| (popLS :state:)
                   popCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                   popCAS :state: >> dupCAS :state:             refines            (popLS :state:) |+| (dupLS :state:)
                   popCAS :state: >> dupCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                   popCAS :state: >> popCAS :state:             refines            (popLS :state:) ||| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) |+| (rotLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) ||| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (rotLS :state:) |+| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) |+| (swapLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (swapLS :state:) |+| (popLS :state:)
                   popCAS :state: >> rotCAS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                   rotCAS :state: >> dupCAS :state:             refines            (dupLS :state:) |+| (rotLS :state:)
                   rotCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (rotLS :state:)
                   rotCAS :state: >> dupCAS :state:             refines            (rotLS :state:) |+| (dupLS :state:)
                   rotCAS :state: >> dupCAS :state:             refines            (rotLS :state:) ||| (dupLS :state:)
                   rotCAS :state: >> popCAS :state:             refines            (popLS :state:) |+| (rotLS :state:)
                   rotCAS :state: >> popCAS :state:             refines            (popLS :state:) ||| (rotLS :state:)
                   rotCAS :state: >> popCAS :state:             refines            (rotLS :state:) |+| (popLS :state:)
                   rotCAS :state: >> popCAS :state:             refines            (rotLS :state:) ||| (popLS :state:)
                   rotCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (rotLS :state:)
                   rotCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                   rotCAS :state: >> rotCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                   swapLS :state: >> overLS :state:        is equivalent to        swapCAS :state: >> overCAS :state:
                   swapLS :state: >> overLS :state:             refines            (overCAS :state:) |+| (swapCAS :state:)
                   swapLS :state: >> overLS :state:             refines            (overCAS :state:) ||| (swapCAS :state:)
                   swapLS :state: >> overLS :state:             refines            (swapCAS :state:) |+| (overCAS :state:)
                   swapLS :state: >> overLS :state:             refines            (swapCAS :state:) ||| (overCAS :state:)
                   swapLS :state: >> swapLS :state:        is equivalent to        swapCAS :state: >> swapCAS :state:
                   swapLS :state: >> swapLS :state:             refines            (dupCAS :state:) |+| (popCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (popCAS :state:) |+| (dupCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (rotCAS :state:) ||| (swapCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (swapCAS :state:) ||| (rotCAS :state:)
                   swapLS :state: >> swapLS :state:        is equivalent to        (swapCAS :state:) |+| (swapCAS :state:)
                   swapLS :state: >> swapLS :state:             refines            (swapCAS :state:) ||| (swapCAS :state:)
                  dupCAS :state: >> overCAS :state:             refines            (dupLS :state:) ||| (dupLS :state:)
                  dupCAS :state: >> overCAS :state:             refines            (dupLS :state:) |+| (overLS :state:)
                  dupCAS :state: >> overCAS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                  dupCAS :state: >> overCAS :state:             refines            (overLS :state:) |+| (dupLS :state:)
                  dupCAS :state: >> overCAS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                  overCAS :state: >> dupCAS :state:             refines            (dupLS :state:) |+| (overLS :state:)
                  overCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (overLS :state:)
                  overCAS :state: >> dupCAS :state:             refines            (overLS :state:) |+| (dupLS :state:)
                  overCAS :state: >> dupCAS :state:             refines            (overLS :state:) ||| (dupLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (dupLS :state:) |+| (popLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (popLS :state:) |+| (dupLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (overLS :state:) |+| (popLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (popLS :state:) |+| (overLS :state:)
                  overCAS :state: >> popCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (overLS :state:) |+| (rotLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (rotLS :state:) |+| (overLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                  overCAS :state: >> rotCAS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                  popCAS :state: >> overCAS :state:             refines            (overLS :state:) |+| (popLS :state:)
                  popCAS :state: >> overCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                  popCAS :state: >> overCAS :state:             refines            (popLS :state:) |+| (overLS :state:)
                  popCAS :state: >> overCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                  popCAS :state: >> swapCAS :state:             refines            (popLS :state:) |+| (swapLS :state:)
                  popCAS :state: >> swapCAS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                  popCAS :state: >> swapCAS :state:             refines            (swapLS :state:) |+| (popLS :state:)
                  popCAS :state: >> swapCAS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                  rotCAS :state: >> overCAS :state:             refines            (overLS :state:) |+| (rotLS :state:)
                  rotCAS :state: >> overCAS :state:             refines            (overLS :state:) ||| (rotLS :state:)
                  rotCAS :state: >> overCAS :state:             refines            (rotLS :state:) |+| (overLS :state:)
                  rotCAS :state: >> overCAS :state:             refines            (rotLS :state:) ||| (overLS :state:)
                  rotCAS :state: >> swapCAS :state:             refines            (rotLS :state:) |+| (swapLS :state:)
                  rotCAS :state: >> swapCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                  rotCAS :state: >> swapCAS :state:             refines            (swapLS :state:) |+| (rotLS :state:)
                  rotCAS :state: >> swapCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                  swapCAS :state: >> dupCAS :state:             refines            (dupLS :state:) |+| (swapLS :state:)
                  swapCAS :state: >> dupCAS :state:             refines            (dupLS :state:) ||| (swapLS :state:)
                  swapCAS :state: >> dupCAS :state:             refines            (swapLS :state:) |+| (dupLS :state:)
                  swapCAS :state: >> dupCAS :state:             refines            (swapLS :state:) ||| (dupLS :state:)
                  swapCAS :state: >> popCAS :state:             refines            (popLS :state:) |+| (swapLS :state:)
                  swapCAS :state: >> popCAS :state:             refines            (popLS :state:) ||| (swapLS :state:)
                  swapCAS :state: >> popCAS :state:             refines            (swapLS :state:) |+| (popLS :state:)
                  swapCAS :state: >> popCAS :state:             refines            (swapLS :state:) ||| (popLS :state:)
                  swapCAS :state: >> rotCAS :state:             refines            (rotLS :state:) |+| (swapLS :state:)
                  swapCAS :state: >> rotCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                  swapCAS :state: >> rotCAS :state:             refines            (swapLS :state:) |+| (rotLS :state:)
                  swapCAS :state: >> rotCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                 overCAS :state: >> overCAS :state:             refines            (overLS :state:) ||| (overLS :state:)
                 overCAS :state: >> swapCAS :state:             refines            (overLS :state:) |+| (swapLS :state:)
                 overCAS :state: >> swapCAS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                 overCAS :state: >> swapCAS :state:             refines            (swapLS :state:) |+| (overLS :state:)
                 overCAS :state: >> swapCAS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                 swapCAS :state: >> overCAS :state:             refines            (overLS :state:) |+| (swapLS :state:)
                 swapCAS :state: >> overCAS :state:             refines            (overLS :state:) ||| (swapLS :state:)
                 swapCAS :state: >> overCAS :state:             refines            (swapLS :state:) |+| (overLS :state:)
                 swapCAS :state: >> overCAS :state:             refines            (swapLS :state:) ||| (overLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (dupLS :state:) |+| (popLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (dupLS :state:) ||| (popLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (popLS :state:) |+| (dupLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (popLS :state:) ||| (dupLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (overLS :state:) ||| (popLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (popLS :state:) ||| (overLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (rotLS :state:) ||| (swapLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (swapLS :state:) ||| (rotLS :state:)
                 swapCAS :state: >> swapCAS :state:             refines            (swapLS :state:) ||| (swapLS :state:)
                (dupLS :state:) |+| (dupLS :state:)        is equivalent to        dupCAS :state: >> dupCAS :state:
                (dupLS :state:) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (dupCAS :state:)
                (dupLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) |+| (overCAS :state:)
                (dupLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (overCAS :state:)
                (dupLS :state:) |+| (dupLS :state:)             refines            (overCAS :state:) |+| (dupCAS :state:)
                (dupLS :state:) |+| (dupLS :state:)             refines            (overCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) |+| (popLS :state:)        is equivalent to        (dupCAS :state:) |+| (popCAS :state:)
                (dupLS :state:) |+| (popLS :state:)             refines            (dupCAS :state:) ||| (popCAS :state:)
                (dupLS :state:) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (dupCAS :state:)
                (dupLS :state:) |+| (popLS :state:)             refines            (popCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) |+| (rotLS :state:)        is equivalent to        (dupCAS :state:) |+| (rotCAS :state:)
                (dupLS :state:) |+| (rotLS :state:)             refines            (dupCAS :state:) ||| (rotCAS :state:)
                (dupLS :state:) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (dupCAS :state:)
                (dupLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) ||| (dupLS :state:)             refines            (dupCAS :state:) ||| (overCAS :state:)
                (dupLS :state:) ||| (dupLS :state:)             refines            (overCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) ||| (popLS :state:)        is equivalent to        (dupCAS :state:) ||| (popCAS :state:)
                (dupLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (dupCAS :state:)
                (dupLS :state:) ||| (rotLS :state:)        is equivalent to        (dupCAS :state:) ||| (rotCAS :state:)
                (dupLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (dupCAS :state:)
                (popLS :state:) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (popCAS :state:)
                (popLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (popCAS :state:)
                (popLS :state:) |+| (dupLS :state:)        is equivalent to        (popCAS :state:) |+| (dupCAS :state:)
                (popLS :state:) |+| (dupLS :state:)             refines            (popCAS :state:) ||| (dupCAS :state:)
                (popLS :state:) |+| (popLS :state:)        is equivalent to        popCAS :state: >> popCAS :state:
                (popLS :state:) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (popCAS :state:)
                (popLS :state:) |+| (popLS :state:)             refines            (popCAS :state:) ||| (popCAS :state:)
                (popLS :state:) |+| (rotLS :state:)        is equivalent to        (popCAS :state:) |+| (rotCAS :state:)
                (popLS :state:) |+| (rotLS :state:)             refines            (popCAS :state:) ||| (rotCAS :state:)
                (popLS :state:) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (popCAS :state:)
                (popLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (popCAS :state:)
                (popLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (popCAS :state:)
                (popLS :state:) ||| (dupLS :state:)        is equivalent to        (popCAS :state:) ||| (dupCAS :state:)
                (popLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (popCAS :state:)
                (popLS :state:) ||| (rotLS :state:)        is equivalent to        (popCAS :state:) ||| (rotCAS :state:)
                (popLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (popCAS :state:)
                (rotLS :state:) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (rotCAS :state:)
                (rotLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) |+| (dupLS :state:)        is equivalent to        (rotCAS :state:) |+| (dupCAS :state:)
                (rotLS :state:) |+| (dupLS :state:)             refines            (rotCAS :state:) ||| (dupCAS :state:)
                (rotLS :state:) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (rotCAS :state:)
                (rotLS :state:) |+| (popLS :state:)             refines            (popCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) |+| (popLS :state:)        is equivalent to        (rotCAS :state:) |+| (popCAS :state:)
                (rotLS :state:) |+| (popLS :state:)             refines            (rotCAS :state:) ||| (popCAS :state:)
                (rotLS :state:) |+| (rotLS :state:)        is equivalent to        rotCAS :state: >> rotCAS :state:
                (rotLS :state:) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (rotCAS :state:)
                (rotLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
                (rotLS :state:) |+| (rotLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) ||| (dupLS :state:)        is equivalent to        (rotCAS :state:) ||| (dupCAS :state:)
                (rotLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) ||| (popLS :state:)        is equivalent to        (rotCAS :state:) ||| (popCAS :state:)
                (rotLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (rotCAS :state:)
                (rotLS :state:) ||| (rotLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
                (rotLS :state:) ||| (rotLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
               (dupLS :state:) |+| (overLS :state:)        is equivalent to        (dupCAS :state:) |+| (overCAS :state:)
               (dupLS :state:) |+| (overLS :state:)             refines            (dupCAS :state:) ||| (overCAS :state:)
               (dupLS :state:) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (dupCAS :state:)
               (dupLS :state:) |+| (overLS :state:)             refines            (overCAS :state:) ||| (dupCAS :state:)
               (dupLS :state:) |+| (swapLS :state:)        is equivalent to        (dupCAS :state:) |+| (swapCAS :state:)
               (dupLS :state:) |+| (swapLS :state:)             refines            (dupCAS :state:) ||| (swapCAS :state:)
               (dupLS :state:) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (dupCAS :state:)
               (dupLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (dupCAS :state:)
               (dupLS :state:) ||| (overLS :state:)        is equivalent to        (dupCAS :state:) ||| (overCAS :state:)
               (dupLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (dupCAS :state:)
               (dupLS :state:) ||| (swapLS :state:)        is equivalent to        (dupCAS :state:) ||| (swapCAS :state:)
               (dupLS :state:) ||| (swapLS :state:)        is equivalent to        (swapCAS :state:) ||| (dupCAS :state:)
               (overLS :state:) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (overCAS :state:)
               (overLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (overCAS :state:)
               (overLS :state:) |+| (dupLS :state:)        is equivalent to        (overCAS :state:) |+| (dupCAS :state:)
               (overLS :state:) |+| (dupLS :state:)             refines            (overCAS :state:) ||| (dupCAS :state:)
               (overLS :state:) |+| (popLS :state:)        is equivalent to        (overCAS :state:) |+| (popCAS :state:)
               (overLS :state:) |+| (popLS :state:)             refines            (overCAS :state:) ||| (popCAS :state:)
               (overLS :state:) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (overCAS :state:)
               (overLS :state:) |+| (popLS :state:)             refines            (popCAS :state:) ||| (overCAS :state:)
               (overLS :state:) |+| (rotLS :state:)        is equivalent to        (overCAS :state:) |+| (rotCAS :state:)
               (overLS :state:) |+| (rotLS :state:)             refines            (overCAS :state:) ||| (rotCAS :state:)
               (overLS :state:) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (overCAS :state:)
               (overLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (overCAS :state:)
               (overLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (overCAS :state:)
               (overLS :state:) ||| (dupLS :state:)        is equivalent to        (overCAS :state:) ||| (dupCAS :state:)
               (overLS :state:) ||| (popLS :state:)        is equivalent to        (overCAS :state:) ||| (popCAS :state:)
               (overLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (overCAS :state:)
               (overLS :state:) ||| (rotLS :state:)        is equivalent to        (overCAS :state:) ||| (rotCAS :state:)
               (overLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (overCAS :state:)
               (popLS :state:) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (popCAS :state:)
               (popLS :state:) |+| (overLS :state:)             refines            (overCAS :state:) ||| (popCAS :state:)
               (popLS :state:) |+| (overLS :state:)        is equivalent to        (popCAS :state:) |+| (overCAS :state:)
               (popLS :state:) |+| (overLS :state:)             refines            (popCAS :state:) ||| (overCAS :state:)
               (popLS :state:) |+| (swapLS :state:)        is equivalent to        (popCAS :state:) |+| (swapCAS :state:)
               (popLS :state:) |+| (swapLS :state:)             refines            (popCAS :state:) ||| (swapCAS :state:)
               (popLS :state:) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (popCAS :state:)
               (popLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (popCAS :state:)
               (popLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (popCAS :state:)
               (popLS :state:) ||| (overLS :state:)        is equivalent to        (popCAS :state:) ||| (overCAS :state:)
               (popLS :state:) ||| (swapLS :state:)        is equivalent to        (popCAS :state:) ||| (swapCAS :state:)
               (popLS :state:) ||| (swapLS :state:)        is equivalent to        (swapCAS :state:) ||| (popCAS :state:)
               (rotLS :state:) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (rotCAS :state:)
               (rotLS :state:) |+| (overLS :state:)             refines            (overCAS :state:) ||| (rotCAS :state:)
               (rotLS :state:) |+| (overLS :state:)        is equivalent to        (rotCAS :state:) |+| (overCAS :state:)
               (rotLS :state:) |+| (overLS :state:)             refines            (rotCAS :state:) ||| (overCAS :state:)
               (rotLS :state:) |+| (swapLS :state:)        is equivalent to        (rotCAS :state:) |+| (swapCAS :state:)
               (rotLS :state:) |+| (swapLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
               (rotLS :state:) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (rotCAS :state:)
               (rotLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
               (rotLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (rotCAS :state:)
               (rotLS :state:) ||| (overLS :state:)        is equivalent to        (rotCAS :state:) ||| (overCAS :state:)
               (rotLS :state:) ||| (swapLS :state:)        is equivalent to        (rotCAS :state:) ||| (swapCAS :state:)
               (rotLS :state:) ||| (swapLS :state:)        is equivalent to        (swapCAS :state:) ||| (rotCAS :state:)
               (swapLS :state:) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (swapCAS :state:)
               (swapLS :state:) |+| (dupLS :state:)             refines            (dupCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) |+| (dupLS :state:)        is equivalent to        (swapCAS :state:) |+| (dupCAS :state:)
               (swapLS :state:) |+| (dupLS :state:)             refines            (swapCAS :state:) ||| (dupCAS :state:)
               (swapLS :state:) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (swapCAS :state:)
               (swapLS :state:) |+| (popLS :state:)             refines            (popCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) |+| (popLS :state:)        is equivalent to        (swapCAS :state:) |+| (popCAS :state:)
               (swapLS :state:) |+| (popLS :state:)             refines            (swapCAS :state:) ||| (popCAS :state:)
               (swapLS :state:) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (swapCAS :state:)
               (swapLS :state:) |+| (rotLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) |+| (rotLS :state:)        is equivalent to        (swapCAS :state:) |+| (rotCAS :state:)
               (swapLS :state:) |+| (rotLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
               (swapLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) ||| (dupLS :state:)        is equivalent to        (swapCAS :state:) ||| (dupCAS :state:)
               (swapLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) ||| (popLS :state:)        is equivalent to        (swapCAS :state:) ||| (popCAS :state:)
               (swapLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (swapCAS :state:)
               (swapLS :state:) ||| (rotLS :state:)        is equivalent to        (swapCAS :state:) ||| (rotCAS :state:)
              (dupCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (dupLS :state:)
              (dupCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) |+| (overLS :state:)
              (dupCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (overLS :state:)
              (dupCAS :state:) |+| (dupCAS :state:)             refines            (overLS :state:) |+| (dupLS :state:)
              (dupCAS :state:) |+| (dupCAS :state:)             refines            (overLS :state:) ||| (dupLS :state:)
              (dupCAS :state:) |+| (popCAS :state:)             refines            (dupLS :state:) ||| (popLS :state:)
              (dupCAS :state:) |+| (popCAS :state:)             refines            (popLS :state:) ||| (dupLS :state:)
              (dupCAS :state:) |+| (rotCAS :state:)             refines            (dupLS :state:) ||| (rotLS :state:)
              (dupCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (dupLS :state:)
              (dupCAS :state:) ||| (dupCAS :state:)             refines            (dupLS :state:) ||| (overLS :state:)
              (dupCAS :state:) ||| (dupCAS :state:)             refines            (overLS :state:) ||| (dupLS :state:)
              (overLS :state:) |+| (overLS :state:)        is equivalent to        overCAS :state: >> overCAS :state:
              (overLS :state:) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (overCAS :state:)
              (overLS :state:) |+| (overLS :state:)             refines            (overCAS :state:) ||| (overCAS :state:)
              (overLS :state:) |+| (swapLS :state:)        is equivalent to        (overCAS :state:) |+| (swapCAS :state:)
              (overLS :state:) |+| (swapLS :state:)             refines            (overCAS :state:) ||| (swapCAS :state:)
              (overLS :state:) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (overCAS :state:)
              (overLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (overCAS :state:)
              (overLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (overCAS :state:)
              (overLS :state:) ||| (swapLS :state:)        is equivalent to        (overCAS :state:) ||| (swapCAS :state:)
              (overLS :state:) ||| (swapLS :state:)        is equivalent to        (swapCAS :state:) ||| (overCAS :state:)
              (popCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (popLS :state:)
              (popCAS :state:) |+| (dupCAS :state:)             refines            (popLS :state:) ||| (dupLS :state:)
              (popCAS :state:) |+| (popCAS :state:)             refines            (popLS :state:) ||| (popLS :state:)
              (popCAS :state:) |+| (rotCAS :state:)             refines            (popLS :state:) ||| (rotLS :state:)
              (popCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (popLS :state:)
              (rotCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (rotLS :state:)
              (rotCAS :state:) |+| (dupCAS :state:)             refines            (rotLS :state:) ||| (dupLS :state:)
              (rotCAS :state:) |+| (popCAS :state:)             refines            (popLS :state:) ||| (rotLS :state:)
              (rotCAS :state:) |+| (popCAS :state:)             refines            (rotLS :state:) ||| (popLS :state:)
              (rotCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (rotLS :state:)
              (rotCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
              (rotCAS :state:) |+| (rotCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
              (rotCAS :state:) ||| (rotCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
              (rotCAS :state:) ||| (rotCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
              (swapLS :state:) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (swapCAS :state:)
              (swapLS :state:) |+| (overLS :state:)             refines            (overCAS :state:) ||| (swapCAS :state:)
              (swapLS :state:) |+| (overLS :state:)        is equivalent to        (swapCAS :state:) |+| (overCAS :state:)
              (swapLS :state:) |+| (overLS :state:)             refines            (swapCAS :state:) ||| (overCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)        is equivalent to        swapCAS :state: >> swapCAS :state:
              (swapLS :state:) |+| (swapLS :state:)             refines            (dupCAS :state:) |+| (popCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (dupCAS :state:) ||| (popCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (popCAS :state:) |+| (dupCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (popCAS :state:) ||| (dupCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (overCAS :state:) ||| (popCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (popCAS :state:) ||| (overCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (swapCAS :state:)
              (swapLS :state:) |+| (swapLS :state:)             refines            (swapCAS :state:) ||| (swapCAS :state:)
              (swapLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (swapCAS :state:)
              (swapLS :state:) ||| (overLS :state:)        is equivalent to        (swapCAS :state:) ||| (overCAS :state:)
              (swapLS :state:) ||| (swapLS :state:)             refines            (rotCAS :state:) ||| (swapCAS :state:)
              (swapLS :state:) ||| (swapLS :state:)             refines            (swapCAS :state:) ||| (rotCAS :state:)
              (swapLS :state:) ||| (swapLS :state:)        is equivalent to        (swapCAS :state:) ||| (swapCAS :state:)
             (dupCAS :state:) |+| (overCAS :state:)             refines            (dupLS :state:) ||| (overLS :state:)
             (dupCAS :state:) |+| (overCAS :state:)             refines            (overLS :state:) ||| (dupLS :state:)
             (dupCAS :state:) |+| (swapCAS :state:)             refines            (dupLS :state:) ||| (swapLS :state:)
             (dupCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (dupLS :state:)
             (overCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (overLS :state:)
             (overCAS :state:) |+| (dupCAS :state:)             refines            (overLS :state:) ||| (dupLS :state:)
             (overCAS :state:) |+| (popCAS :state:)             refines            (overLS :state:) ||| (popLS :state:)
             (overCAS :state:) |+| (popCAS :state:)             refines            (popLS :state:) ||| (overLS :state:)
             (overCAS :state:) |+| (rotCAS :state:)             refines            (overLS :state:) ||| (rotLS :state:)
             (overCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (overLS :state:)
             (popCAS :state:) |+| (overCAS :state:)             refines            (overLS :state:) ||| (popLS :state:)
             (popCAS :state:) |+| (overCAS :state:)             refines            (popLS :state:) ||| (overLS :state:)
             (popCAS :state:) |+| (swapCAS :state:)             refines            (popLS :state:) ||| (swapLS :state:)
             (popCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (popLS :state:)
             (rotCAS :state:) |+| (overCAS :state:)             refines            (overLS :state:) ||| (rotLS :state:)
             (rotCAS :state:) |+| (overCAS :state:)             refines            (rotLS :state:) ||| (overLS :state:)
             (rotCAS :state:) |+| (swapCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
             (rotCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
             (swapCAS :state:) |+| (dupCAS :state:)             refines            (dupLS :state:) ||| (swapLS :state:)
             (swapCAS :state:) |+| (dupCAS :state:)             refines            (swapLS :state:) ||| (dupLS :state:)
             (swapCAS :state:) |+| (popCAS :state:)             refines            (popLS :state:) ||| (swapLS :state:)
             (swapCAS :state:) |+| (popCAS :state:)             refines            (swapLS :state:) ||| (popLS :state:)
             (swapCAS :state:) |+| (rotCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
             (swapCAS :state:) |+| (rotCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
            (overCAS :state:) |+| (overCAS :state:)             refines            (overLS :state:) ||| (overLS :state:)
            (overCAS :state:) |+| (swapCAS :state:)             refines            (overLS :state:) ||| (swapLS :state:)
            (overCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (overLS :state:)
            (swapCAS :state:) |+| (overCAS :state:)             refines            (overLS :state:) ||| (swapLS :state:)
            (swapCAS :state:) |+| (overCAS :state:)             refines            (swapLS :state:) ||| (overLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (dupLS :state:) |+| (popLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (dupLS :state:) ||| (popLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (popLS :state:) |+| (dupLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (popLS :state:) ||| (dupLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (overLS :state:) ||| (popLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (popLS :state:) ||| (overLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
            (swapCAS :state:) |+| (swapCAS :state:)             refines            (swapLS :state:) ||| (swapLS :state:)
            (swapCAS :state:) ||| (swapCAS :state:)             refines            (rotLS :state:) ||| (swapLS :state:)
            (swapCAS :state:) ||| (swapCAS :state:)             refines            (swapLS :state:) ||| (rotLS :state:)
         dupLS :state: >> whenJust pushLS :state: x        is equivalent to        dupCAS :state: >> whenJust pushCAS :state: x
         dupLS :state: >> whenJust pushLS :state: x             refines            (dupCAS :state:) |+| (whenJust pushCAS :state: x)
         dupLS :state: >> whenJust pushLS :state: x             refines            (whenJust pushCAS :state: x) |+| (dupCAS :state:)
         popLS :state: >> whenJust pushLS :state: x        is equivalent to        popCAS :state: >> whenJust pushCAS :state: x
         popLS :state: >> whenJust pushLS :state: x             refines            (popCAS :state:) |+| (whenJust pushCAS :state: x)
         popLS :state: >> whenJust pushLS :state: x             refines            (whenJust pushCAS :state: x) |+| (popCAS :state:)
         rotLS :state: >> whenJust pushLS :state: x        is equivalent to        rotCAS :state: >> whenJust pushCAS :state: x
         rotLS :state: >> whenJust pushLS :state: x             refines            (rotCAS :state:) |+| (whenJust pushCAS :state: x)
         rotLS :state: >> whenJust pushLS :state: x             refines            (whenJust pushCAS :state: x) |+| (rotCAS :state:)
         whenJust pushLS :state: x >> dupLS :state:        is equivalent to        whenJust pushCAS :state: x >> dupCAS :state:
         whenJust pushLS :state: x >> dupLS :state:             refines            (dupCAS :state:) |+| (whenJust pushCAS :state: x)
         whenJust pushLS :state: x >> dupLS :state:             refines            (whenJust pushCAS :state: x) |+| (dupCAS :state:)
         whenJust pushLS :state: x >> popLS :state:             refines            (dupCAS :state:) ||| (popCAS :state:)
         whenJust pushLS :state: x >> popLS :state:             refines            (popCAS :state:) ||| (dupCAS :state:)
         whenJust pushLS :state: x >> popLS :state:             refines            (overCAS :state:) ||| (popCAS :state:)
         whenJust pushLS :state: x >> popLS :state:             refines            (popCAS :state:) ||| (overCAS :state:)
         whenJust pushLS :state: x >> popLS :state:        is equivalent to        whenJust pushCAS :state: x >> popCAS :state:
         whenJust pushLS :state: x >> popLS :state:             refines            (popCAS :state:) |+| (whenJust pushCAS :state: x)
         whenJust pushLS :state: x >> popLS :state:             refines            (whenJust pushCAS :state: x) |+| (popCAS :state:)
         whenJust pushLS :state: x >> rotLS :state:        is equivalent to        whenJust pushCAS :state: x >> rotCAS :state:
         whenJust pushLS :state: x >> rotLS :state:             refines            (rotCAS :state:) |+| (whenJust pushCAS :state: x)
         whenJust pushLS :state: x >> rotLS :state:             refines            (whenJust pushCAS :state: x) |+| (rotCAS :state:)
        overLS :state: >> whenJust pushLS :state: x        is equivalent to        overCAS :state: >> whenJust pushCAS :state: x
        overLS :state: >> whenJust pushLS :state: x             refines            (overCAS :state:) |+| (whenJust pushCAS :state: x)
        overLS :state: >> whenJust pushLS :state: x             refines            (whenJust pushCAS :state: x) |+| (overCAS :state:)
        swapLS :state: >> whenJust pushLS :state: x        is equivalent to        swapCAS :state: >> whenJust pushCAS :state: x
        swapLS :state: >> whenJust pushLS :state: x             refines            (swapCAS :state:) |+| (whenJust pushCAS :state: x)
        swapLS :state: >> whenJust pushLS :state: x             refines            (whenJust pushCAS :state: x) |+| (swapCAS :state:)
        whenJust pushLS :state: x >> overLS :state:        is equivalent to        whenJust pushCAS :state: x >> overCAS :state:
        whenJust pushLS :state: x >> overLS :state:             refines            (overCAS :state:) |+| (whenJust pushCAS :state: x)
        whenJust pushLS :state: x >> overLS :state:             refines            (whenJust pushCAS :state: x) |+| (overCAS :state:)
        whenJust pushLS :state: x >> swapLS :state:        is equivalent to        whenJust pushCAS :state: x >> swapCAS :state:
        whenJust pushLS :state: x >> swapLS :state:             refines            (swapCAS :state:) |+| (whenJust pushCAS :state: x)
        whenJust pushLS :state: x >> swapLS :state:             refines            (whenJust pushCAS :state: x) |+| (swapCAS :state:)
       dupCAS :state: >> whenJust pushCAS :state: x             refines            (dupLS :state:) |+| (whenJust pushLS :state: x)
       dupCAS :state: >> whenJust pushCAS :state: x             refines            (whenJust pushLS :state: x) |+| (dupLS :state:)
       popCAS :state: >> whenJust pushCAS :state: x             refines            (popLS :state:) |+| (whenJust pushLS :state: x)
       popCAS :state: >> whenJust pushCAS :state: x             refines            (whenJust pushLS :state: x) |+| (popLS :state:)
       rotCAS :state: >> whenJust pushCAS :state: x             refines            (rotLS :state:) |+| (whenJust pushLS :state: x)
       rotCAS :state: >> whenJust pushCAS :state: x             refines            (whenJust pushLS :state: x) |+| (rotLS :state:)
       whenJust pushCAS :state: x >> dupCAS :state:             refines            (dupLS :state:) |+| (whenJust pushLS :state: x)
       whenJust pushCAS :state: x >> dupCAS :state:             refines            (whenJust pushLS :state: x) |+| (dupLS :state:)
       whenJust pushCAS :state: x >> popCAS :state:             refines            (popLS :state:) |+| (whenJust pushLS :state: x)
       whenJust pushCAS :state: x >> popCAS :state:             refines            (whenJust pushLS :state: x) |+| (popLS :state:)
       whenJust pushCAS :state: x >> rotCAS :state:             refines            (rotLS :state:) |+| (whenJust pushLS :state: x)
       whenJust pushCAS :state: x >> rotCAS :state:             refines            (whenJust pushLS :state: x) |+| (rotLS :state:)
      overCAS :state: >> whenJust pushCAS :state: x             refines            (overLS :state:) |+| (whenJust pushLS :state: x)
      overCAS :state: >> whenJust pushCAS :state: x             refines            (whenJust pushLS :state: x) |+| (overLS :state:)
      swapCAS :state: >> whenJust pushCAS :state: x             refines            (swapLS :state:) |+| (whenJust pushLS :state: x)
      swapCAS :state: >> whenJust pushCAS :state: x             refines            (whenJust pushLS :state: x) |+| (swapLS :state:)
      whenJust pushCAS :state: x >> overCAS :state:             refines            (overLS :state:) |+| (whenJust pushLS :state: x)
      whenJust pushCAS :state: x >> overCAS :state:             refines            (whenJust pushLS :state: x) |+| (overLS :state:)
      whenJust pushCAS :state: x >> swapCAS :state:             refines            (swapLS :state:) |+| (whenJust pushLS :state: x)
      whenJust pushCAS :state: x >> swapCAS :state:             refines            (whenJust pushLS :state: x) |+| (swapLS :state:)
    (dupLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (dupCAS :state:) |+| (whenJust pushCAS :state: x)
    (dupLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (whenJust pushCAS :state: x) |+| (dupCAS :state:)
    (popLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (popCAS :state:) |+| (whenJust pushCAS :state: x)
    (popLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (whenJust pushCAS :state: x) |+| (popCAS :state:)
    (rotLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (rotCAS :state:) |+| (whenJust pushCAS :state: x)
    (rotLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (whenJust pushCAS :state: x) |+| (rotCAS :state:)
    (whenJust pushLS :state: x) |+| (dupLS :state:)        is equivalent to        (dupCAS :state:) |+| (whenJust pushCAS :state: x)
    (whenJust pushLS :state: x) |+| (dupLS :state:)        is equivalent to        (whenJust pushCAS :state: x) |+| (dupCAS :state:)
    (whenJust pushLS :state: x) |+| (popLS :state:)        is equivalent to        (popCAS :state:) |+| (whenJust pushCAS :state: x)
    (whenJust pushLS :state: x) |+| (popLS :state:)        is equivalent to        (whenJust pushCAS :state: x) |+| (popCAS :state:)
    (whenJust pushLS :state: x) |+| (rotLS :state:)        is equivalent to        (rotCAS :state:) |+| (whenJust pushCAS :state: x)
    (whenJust pushLS :state: x) |+| (rotLS :state:)        is equivalent to        (whenJust pushCAS :state: x) |+| (rotCAS :state:)
   (overLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (overCAS :state:) |+| (whenJust pushCAS :state: x)
   (overLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (whenJust pushCAS :state: x) |+| (overCAS :state:)
   (swapLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (swapCAS :state:) |+| (whenJust pushCAS :state: x)
   (swapLS :state:) |+| (whenJust pushLS :state: x)        is equivalent to        (whenJust pushCAS :state: x) |+| (swapCAS :state:)
   (whenJust pushLS :state: x) |+| (overLS :state:)        is equivalent to        (overCAS :state:) |+| (whenJust pushCAS :state: x)
   (whenJust pushLS :state: x) |+| (overLS :state:)        is equivalent to        (whenJust pushCAS :state: x) |+| (overCAS :state:)
   (whenJust pushLS :state: x) |+| (swapLS :state:)        is equivalent to        (swapCAS :state:) |+| (whenJust pushCAS :state: x)
   (whenJust pushLS :state: x) |+| (swapLS :state:)        is equivalent to        (whenJust pushCAS :state: x) |+| (swapCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (dupCAS :state:) |+| (popCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (dupCAS :state:) ||| (popCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (popCAS :state:) |+| (dupCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (popCAS :state:) ||| (dupCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (overCAS :state:) ||| (popCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (popCAS :state:) ||| (overCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (rotCAS :state:) ||| (swapCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (swapCAS :state:) ||| (rotCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'             refines            (swapCAS :state:) ||| (swapCAS :state:)
popLS :state: >>= \x' -> whenJust pushLS :state: x'        is equivalent to        popCAS :state: >>= \x' -> whenJust pushCAS :state: x'
