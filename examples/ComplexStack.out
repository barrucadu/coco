 dupLS :state:        strictly refines        dupLS :state: >> swapLS :state:
 dupLS :state:        strictly refines        (dupLS :state:) ||| (rotLS :state:)
 dupLS :state:        strictly refines        (dupLS :state:) ||| (swapLS :state:)
 popLS :state:        strictly refines        popLS :state: >> rotLS :state:
 popLS :state:        strictly refines        (rotLS :state:) ||| (popLS :state:)
 popLS :state:        strictly refines        (swapLS :state:) ||| (popLS :state:)
overLS :state:        strictly refines        (overLS :state:) ||| (rotLS :state:)
peekLS :state:        strictly refines        dupLS :state: >> popLS :state:
peekLS :state:        strictly refines        swapLS :state: >> swapLS :state:
peekLS :state:        strictly refines        (dupLS :state:) ||| (popLS :state:)
peekLS :state:        strictly refines        (swapLS :state:) ||| (swapLS :state:)
peekLS :state:        strictly refines        popLS :state: >>= \m -> whenJust pushLS :state: m

 dupCAS :state:        strictly refines        dupCAS :state: >> swapCAS :state:
 dupCAS :state:        strictly refines        (dupCAS :state:) ||| (rotCAS :state:)
 dupCAS :state:        strictly refines        (dupCAS :state:) ||| (swapCAS :state:)
 popCAS :state:        strictly refines        popCAS :state: >> rotCAS :state:
 popCAS :state:        strictly refines        (rotCAS :state:) ||| (popCAS :state:)
 popCAS :state:        strictly refines        (swapCAS :state:) ||| (popCAS :state:)
overCAS :state:        strictly refines        (overCAS :state:) ||| (rotCAS :state:)
peekCAS :state:        strictly refines        dupCAS :state: >> popCAS :state:
peekCAS :state:        strictly refines        swapCAS :state: >> swapCAS :state:
peekCAS :state:        strictly refines        (dupCAS :state:) ||| (popCAS :state:)
peekCAS :state:        strictly refines        (swapCAS :state:) ||| (swapCAS :state:)
peekCAS :state:        strictly refines        popCAS :state: >>= \m -> whenJust pushCAS :state: m

                                   dupLS :state:        is equivalent to        dupCAS :state:
                                   popLS :state:        is equivalent to        popCAS :state:
                                   rotLS :state:        is equivalent to        rotCAS :state:
                                  dupCAS :state:        strictly refines        (dupLS :state:) ||| (rotLS :state:)
                                  dupCAS :state:        strictly refines        (dupLS :state:) ||| (swapLS :state:)
                                  overLS :state:        is equivalent to        overCAS :state:
                                  peekLS :state:        is equivalent to        peekCAS :state:
                                  popCAS :state:        strictly refines        popLS :state: >> rotLS :state:
                                  popCAS :state:        strictly refines        (rotLS :state:) ||| (popLS :state:)
                                  popCAS :state:        strictly refines        (swapLS :state:) ||| (popLS :state:)
                                  swapLS :state:        is equivalent to        swapCAS :state:
                                 overCAS :state:        strictly refines        (overLS :state:) ||| (rotLS :state:)
                                 peekCAS :state:        strictly refines        swapLS :state: >> swapLS :state:
                                 peekCAS :state:        strictly refines        (dupLS :state:) ||| (popLS :state:)
                                 peekCAS :state:        strictly refines        (swapLS :state:) ||| (swapLS :state:)
                                 peekCAS :state:        strictly refines        popLS :state: >>= \m -> whenJust pushLS :state: m
                       whenJust pushLS :state: m        is equivalent to        whenJust pushCAS :state: m
                  dupLS :state: >> dupLS :state:        is equivalent to        dupCAS :state: >> dupCAS :state:
                  dupLS :state: >> dupLS :state:        is equivalent to        (dupCAS :state:) ||| (dupCAS :state:)
                  dupLS :state: >> dupLS :state:        strictly refines        (dupCAS :state:) ||| (overCAS :state:)
                  dupLS :state: >> rotLS :state:        is equivalent to        dupCAS :state: >> rotCAS :state:
                  popLS :state: >> dupLS :state:        is equivalent to        popCAS :state: >> dupCAS :state:
                  popLS :state: >> popLS :state:        is equivalent to        popCAS :state: >> popCAS :state:
                  popLS :state: >> popLS :state:        is equivalent to        (popCAS :state:) ||| (popCAS :state:)
                  rotLS :state: >> dupLS :state:        is equivalent to        rotCAS :state: >> dupCAS :state:
                  rotLS :state: >> popLS :state:        is equivalent to        rotCAS :state: >> popCAS :state:
                  rotLS :state: >> rotLS :state:        is equivalent to        rotCAS :state: >> rotCAS :state:
                  rotLS :state: >> rotLS :state:        is equivalent to        (rotCAS :state:) ||| (rotCAS :state:)
                 dupLS :state: >> overLS :state:        is equivalent to        dupCAS :state: >> overCAS :state:
                 dupLS :state: >> overLS :state:        strictly refines        (dupCAS :state:) ||| (overCAS :state:)
                 overLS :state: >> dupLS :state:        is equivalent to        overCAS :state: >> dupCAS :state:
                 overLS :state: >> dupLS :state:        strictly refines        (dupCAS :state:) ||| (overCAS :state:)
                 overLS :state: >> popLS :state:        is equivalent to        overCAS :state: >> popCAS :state:
                 overLS :state: >> popLS :state:        strictly refines        (overCAS :state:) ||| (popCAS :state:)
                 overLS :state: >> rotLS :state:        is equivalent to        overCAS :state: >> rotCAS :state:
                 popLS :state: >> overLS :state:        is equivalent to        popCAS :state: >> overCAS :state:
                 popLS :state: >> overLS :state:        strictly refines        (overCAS :state:) ||| (popCAS :state:)
                 popLS :state: >> swapLS :state:        is equivalent to        popCAS :state: >> swapCAS :state:
                 rotLS :state: >> overLS :state:        is equivalent to        rotCAS :state: >> overCAS :state:
                 rotLS :state: >> swapLS :state:        is equivalent to        rotCAS :state: >> swapCAS :state:
                 rotLS :state: >> swapLS :state:        strictly refines        (rotCAS :state:) ||| (swapCAS :state:)
                 swapLS :state: >> dupLS :state:        is equivalent to        swapCAS :state: >> dupCAS :state:
                 swapLS :state: >> popLS :state:        is equivalent to        swapCAS :state: >> popCAS :state:
                 swapLS :state: >> rotLS :state:        is equivalent to        swapCAS :state: >> rotCAS :state:
                 swapLS :state: >> rotLS :state:        strictly refines        (rotCAS :state:) ||| (swapCAS :state:)
                dupCAS :state: >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (overLS :state:)
                dupCAS :state: >> rotCAS :state:        strictly refines        (dupLS :state:) ||| (rotLS :state:)
                overLS :state: >> overLS :state:        is equivalent to        overCAS :state: >> overCAS :state:
                overLS :state: >> overLS :state:        is equivalent to        (overCAS :state:) ||| (overCAS :state:)
                overLS :state: >> swapLS :state:        is equivalent to        overCAS :state: >> swapCAS :state:
                overLS :state: >> swapLS :state:        strictly refines        (overCAS :state:) ||| (swapCAS :state:)
                popCAS :state: >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (popLS :state:)
                rotCAS :state: >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (rotLS :state:)
                rotCAS :state: >> popCAS :state:        strictly refines        (rotLS :state:) ||| (popLS :state:)
                swapLS :state: >> overLS :state:        is equivalent to        swapCAS :state: >> overCAS :state:
                swapLS :state: >> overLS :state:        strictly refines        (overCAS :state:) ||| (swapCAS :state:)
               dupCAS :state: >> overCAS :state:        strictly refines        (dupLS :state:) ||| (overLS :state:)
               overCAS :state: >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (overLS :state:)
               overCAS :state: >> popCAS :state:        strictly refines        (dupLS :state:) ||| (popLS :state:)
               overCAS :state: >> popCAS :state:        strictly refines        (overLS :state:) ||| (popLS :state:)
               overCAS :state: >> rotCAS :state:        strictly refines        (overLS :state:) ||| (rotLS :state:)
               popCAS :state: >> overCAS :state:        strictly refines        (overLS :state:) ||| (popLS :state:)
               popCAS :state: >> swapCAS :state:        strictly refines        (swapLS :state:) ||| (popLS :state:)
               rotCAS :state: >> overCAS :state:        strictly refines        (overLS :state:) ||| (rotLS :state:)
               rotCAS :state: >> swapCAS :state:        strictly refines        (rotLS :state:) ||| (swapLS :state:)
               swapCAS :state: >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (swapLS :state:)
               swapCAS :state: >> popCAS :state:        strictly refines        (swapLS :state:) ||| (popLS :state:)
               swapCAS :state: >> rotCAS :state:        strictly refines        (rotLS :state:) ||| (swapLS :state:)
              overCAS :state: >> swapCAS :state:        strictly refines        (overLS :state:) ||| (swapLS :state:)
              swapCAS :state: >> overCAS :state:        strictly refines        (overLS :state:) ||| (swapLS :state:)
             (dupLS :state:) ||| (dupLS :state:)        is equivalent to        dupCAS :state: >> dupCAS :state:
             (dupLS :state:) ||| (dupLS :state:)        is equivalent to        (dupCAS :state:) ||| (dupCAS :state:)
             (dupLS :state:) ||| (dupLS :state:)        strictly refines        (dupCAS :state:) ||| (overCAS :state:)
             (popLS :state:) ||| (popLS :state:)        is equivalent to        popCAS :state: >> popCAS :state:
             (popLS :state:) ||| (popLS :state:)        is equivalent to        (popCAS :state:) ||| (popCAS :state:)
             (rotLS :state:) ||| (rotLS :state:)        is equivalent to        rotCAS :state: >> rotCAS :state:
             (rotLS :state:) ||| (rotLS :state:)        is equivalent to        (rotCAS :state:) ||| (rotCAS :state:)
            (dupLS :state:) ||| (overLS :state:)        is equivalent to        (dupCAS :state:) ||| (overCAS :state:)
            (overLS :state:) ||| (popLS :state:)        is equivalent to        (overCAS :state:) ||| (popCAS :state:)
            (rotLS :state:) ||| (swapLS :state:)        is equivalent to        (rotCAS :state:) ||| (swapCAS :state:)
           (dupCAS :state:) ||| (dupCAS :state:)        strictly refines        (dupLS :state:) ||| (overLS :state:)
           (overLS :state:) ||| (overLS :state:)        is equivalent to        overCAS :state: >> overCAS :state:
           (overLS :state:) ||| (overLS :state:)        is equivalent to        (overCAS :state:) ||| (overCAS :state:)
           (overLS :state:) ||| (swapLS :state:)        is equivalent to        (overCAS :state:) ||| (swapCAS :state:)
      dupLS :state: >> whenJust pushLS :state: m        is equivalent to        dupCAS :state: >> whenJust pushCAS :state: m
      dupLS :state: >> whenJust pushLS :state: m        strictly refines        (dupCAS :state:) ||| (whenJust pushCAS :state: m)
      popLS :state: >> whenJust pushLS :state: m        is equivalent to        popCAS :state: >> whenJust pushCAS :state: m
      popLS :state: >> whenJust pushLS :state: m        strictly refines        (popCAS :state:) ||| (whenJust pushCAS :state: m)
      rotLS :state: >> whenJust pushLS :state: m        is equivalent to        rotCAS :state: >> whenJust pushCAS :state: m
      rotLS :state: >> whenJust pushLS :state: m        strictly refines        (rotCAS :state:) ||| (whenJust pushCAS :state: m)
      whenJust pushLS :state: m >> dupLS :state:        is equivalent to        whenJust pushCAS :state: m >> dupCAS :state:
      whenJust pushLS :state: m >> dupLS :state:        strictly refines        (dupCAS :state:) ||| (whenJust pushCAS :state: m)
      whenJust pushLS :state: m >> popLS :state:        is equivalent to        whenJust pushCAS :state: m >> popCAS :state:
      whenJust pushLS :state: m >> popLS :state:        strictly refines        (popCAS :state:) ||| (whenJust pushCAS :state: m)
      whenJust pushLS :state: m >> rotLS :state:        is equivalent to        whenJust pushCAS :state: m >> rotCAS :state:
      whenJust pushLS :state: m >> rotLS :state:        strictly refines        (rotCAS :state:) ||| (whenJust pushCAS :state: m)
     overLS :state: >> whenJust pushLS :state: m        is equivalent to        overCAS :state: >> whenJust pushCAS :state: m
     overLS :state: >> whenJust pushLS :state: m        strictly refines        (overCAS :state:) ||| (whenJust pushCAS :state: m)
     swapLS :state: >> whenJust pushLS :state: m        is equivalent to        swapCAS :state: >> whenJust pushCAS :state: m
     swapLS :state: >> whenJust pushLS :state: m        strictly refines        (swapCAS :state:) ||| (whenJust pushCAS :state: m)
     whenJust pushLS :state: m >> overLS :state:        is equivalent to        whenJust pushCAS :state: m >> overCAS :state:
     whenJust pushLS :state: m >> overLS :state:        strictly refines        (overCAS :state:) ||| (whenJust pushCAS :state: m)
     whenJust pushLS :state: m >> swapLS :state:        is equivalent to        whenJust pushCAS :state: m >> swapCAS :state:
     whenJust pushLS :state: m >> swapLS :state:        strictly refines        (swapCAS :state:) ||| (whenJust pushCAS :state: m)
    dupCAS :state: >> whenJust pushCAS :state: m        strictly refines        (dupLS :state:) ||| (whenJust pushLS :state: m)
    popCAS :state: >> whenJust pushCAS :state: m        strictly refines        (popLS :state:) ||| (whenJust pushLS :state: m)
    rotCAS :state: >> whenJust pushCAS :state: m        strictly refines        (rotLS :state:) ||| (whenJust pushLS :state: m)
    whenJust pushCAS :state: m >> dupCAS :state:        strictly refines        (dupLS :state:) ||| (whenJust pushLS :state: m)
    whenJust pushCAS :state: m >> popCAS :state:        strictly refines        (popLS :state:) ||| (whenJust pushLS :state: m)
    whenJust pushCAS :state: m >> rotCAS :state:        strictly refines        (rotLS :state:) ||| (whenJust pushLS :state: m)
   overCAS :state: >> whenJust pushCAS :state: m        strictly refines        (overLS :state:) ||| (whenJust pushLS :state: m)
   swapCAS :state: >> whenJust pushCAS :state: m        strictly refines        (swapLS :state:) ||| (whenJust pushLS :state: m)
   whenJust pushCAS :state: m >> overCAS :state:        strictly refines        (overLS :state:) ||| (whenJust pushLS :state: m)
   whenJust pushCAS :state: m >> swapCAS :state:        strictly refines        (swapLS :state:) ||| (whenJust pushLS :state: m)
 (dupLS :state:) ||| (whenJust pushLS :state: m)        is equivalent to        (dupCAS :state:) ||| (whenJust pushCAS :state: m)
 (popLS :state:) ||| (whenJust pushLS :state: m)        is equivalent to        (popCAS :state:) ||| (whenJust pushCAS :state: m)
 (rotLS :state:) ||| (whenJust pushLS :state: m)        is equivalent to        (rotCAS :state:) ||| (whenJust pushCAS :state: m)
(overLS :state:) ||| (whenJust pushLS :state: m)        is equivalent to        (overCAS :state:) ||| (whenJust pushCAS :state: m)
(swapLS :state:) ||| (whenJust pushLS :state: m)        is equivalent to        (swapCAS :state:) ||| (whenJust pushCAS :state: m)
